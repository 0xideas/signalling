from agent_object import Agent
from numpy.random import choice


class Environment(object):
	def __init__(self, dimensions, agent_number, action_number, state_number):
		assert dimensions[0] * dimensions[1] >= agent_number
		self.dimensions = dimensions
		self.agent_number = agent_number
		self.action_number = action_number
		self.state_number = state_number
		self.agents = {"A" + str(x): Agent(action_number, state_number) for x in range(agent_number)}
		self.fields = [(x,y) for x in dimensions[0] for y in dimensions[1]]
		self.agent_locations = [choice(self.fields, replace=False) for x in range(agent_number)]

	def move_all(self):
		for agent_id in self.agents:
			agent = self.agents[agent_id]
			move = agent.move()
			agent_i = int(agent_id[1:])
			self.agent_locations[agent_i] = move_agent(agent_locations[agent_i])

	def move_agent(self, original_location, move):
		location = tuple(original_location)
		if move == "up":
			location[0] -= 1
		elif move == "down":
			location[0] += 1
		elif move == "left":
			location[1] -= 1
		elif move == "right":
			location[1] += 1

		if 0 <= location[0] < self.dimensions[0] and 0 <= location[1] < self.dimensions[1] and location not in self.agent_locations:
			return location
		else:
			return original_location

	def print_board(self):
		board = np.zeros(self.dimensions)
		x = 0
		for location in self.agent_locations:
			#one cannot see the first agent
			board[location] = x
			x += 1
		print(board)




if __name__ == '__main__':
	env = Environment((10,10), 5, 2, 2)
	env.print_board()

	for x in range(10):
		env.move_all()
		env.print_board()
